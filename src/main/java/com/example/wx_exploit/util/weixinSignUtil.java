package com.example.wx_exploit.util;

import com.example.wx_exploit.pojo.*;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author 李皓
 * @version 1.0.0
 * @ClassName weixinSignUtil.java
 * @Description TODO
 * @createTime 2021年08月10日 14:19:00
 */
@Slf4j
@Component
public class weixinSignUtil {

    @Value("${wx.mp.appid}")
    private String appid;

    @Value("${wx.mp.appsecret}")
    private String appsecret;

    @Value("${wx.mp.url}")
    private  String tken_url;
    //用于存储token
    public static Token atoken;

    private static String token = "testToken";

    public boolean checkSignature(String signature,String timestamp,String nonce){
        String[] arr = new String[] {token,timestamp,nonce};
        Arrays.sort(arr);
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < arr.length; i++) {
            stringBuilder.append(arr[i]);
        }
        MessageDigest md = null;
        String tmpStr = null;

        try{
            md = MessageDigest.getInstance("SHA-1");
            byte[] digest = md.digest(stringBuilder.toString().getBytes());
            tmpStr = toHexString(digest);
        }catch (NoSuchAlgorithmException e){
            e.printStackTrace();
        }
        log.info("執行微信簽名加密认证");
        stringBuilder = null;
        return tmpStr != null ? tmpStr.equals(signature) : false;
    }

    public static String toHexString(byte[] byteArray) {
        if (byteArray == null || byteArray.length < 1){
            throw new IllegalArgumentException("this byteArray must not be null or empty");
        }
        final StringBuilder hexString = new StringBuilder();
        for (int i = 0; i < byteArray.length; i++) {
            if ((byteArray[i] & 0xff) < 0x10){
                //0~F前面不零
                hexString.append("0");
            }
            hexString.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return hexString.toString().toLowerCase();
    }


    /**
     * 解析xml数据包
     * @param is
     * @return
     */
    public Map<String,String> parseRequest(InputStream is){
        HashMap<String, String> map = new HashMap<>();
        SAXReader reader = new SAXReader();
        try {
            //读取输入流，获取文档对象
            Document read = reader.read(is);
            //根据文档对象获取根节点
            Element rootElement = read.getRootElement();
            //获取根节点的所有子节点
            List<Element> elements = rootElement.elements();
            elements.forEach(element -> {
                map.put(element.getName(),element.getStringValue());
            });
        }catch (DocumentException e){
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 用于处理所有事件和消息的回复
     * @param requestMap
     * @return
     */
    public String getRespose(Map<String,String> requestMap){
        BaseMessage msg = null;
        String msgType = requestMap.get("MsgType");
        switch (msgType){
            case "text":
               msg = dealTextMessage(requestMap);
                break;
            case "image":
                msg = dealTextMessage(requestMap);
                break;
            case "voice":

                break;
            case "video":

                break;
            case "music":

                break;
            case "news":

                break;
        }
        XStream xStream = new XStream();
        //使XStream生效
        xStream.autodetectAnnotations( true );
        String s = xStream.toXML(msg);
        return s;
    }

    /**
     * 回复各类消息
     * @param requestMap
     * @return
     */
    private BaseMessage dealTextMessage(Map<String, String> requestMap) {
        if (requestMap.get("MsgType").equals("text")){
            TextMessage tm = new TextMessage(requestMap,requestMap.get("Content"));
            return tm;
        }
        if (requestMap.get("MsgType").equals("image")){
            Image image = new Image();
            image.setMediaId(requestMap.get("MediaId"));
            image.setPicUrl(requestMap.get("PicUrl"));
            image.setMsgId(requestMap.get("MsgId"));
            ImgMessage imgMessage = new ImgMessage(requestMap, image);
            return imgMessage;
        }
        return null;
    }
    private int a = 0;

    /**
     * 获取token并存储到atoken中
     */
    @Bean
    private void getToken(){
        String url = tken_url.replace("APPID",appid).replace("APPSECRET",appsecret);
        String token1 = TokenUtil.getToken(url);
        JSONObject jsonObject = JSONObject.fromObject(token1);
        atoken = new Token(jsonObject.getString("access_token"),jsonObject.getString("expires_in"));
    }

    /**
     * 获取token值
     * @return
     */
    public  String getAccessToken(){
        if (atoken == null || atoken.isExpired()){
            getToken();
        }
        return atoken.getAccessToken();
    }

    /**
     * 向指定的地址发送一个post请求
     * @param url
     * @param data
     * @return
     */
    public String post(String url,String data){
        try {
            URL url1 = new URL(url);
            URLConnection connection = url1.openConnection();
            //设置成可发送状态
            connection.setDoOutput(true);
            //获取输出流
            OutputStream outputStream = connection.getOutputStream();
            //写入输入流
            outputStream.write(data.getBytes());
            outputStream.close();
            //获取输入流
            InputStream is = connection.getInputStream();
            byte[] b = new byte[1024];
            int len;
            StringBuilder stringBuilder = new StringBuilder();
            while ((len = is.read(b)) != -1){
                stringBuilder.append(new String(b,0,len));
            }
            outputStream.close();
            is.close();
            return stringBuilder.toString();
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }



    /**
     * 模板消息
     */
    public void ReturnMessages(Map<String, String> requestMap){
        SimpleDateFormat ss = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");
        String time = ss.format(new Date());
        String accessToken = getAccessToken();
        String url = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+accessToken;
        String data = "{\n" +
                "           \"touser\":\""+requestMap.get("FromUserName")+"\",\n" +
                "           \"template_id\":\"ZE9mxGvegEJVyBKibC5innl9FrNjYWmMY0GYLNxIzSw\",\n" +
                "           \"url\":\"https://mkt.51job.com/tg/sem/LP_2020_1.html?from=baiduad\",            \n" +
                "           \"data\":{\n" +
                "                   \"first\": {\n" +
                "                       \"value\":\"恭喜你被录取了\",\n" +
                "                       \"color\":\"#173177\"\n" +
                "                   },\n" +
                "                   \"company\":{\n" +
                "                       \"value\":\"华龙网\",\n" +
                "                       \"color\":\"#173177\"\n" +
                "                   },\n" +
                "                   \"time\": {\n" +
                "                       \"value\":\""+time+"\",\n" +
                "                       \"color\":\"#173177\"\n" +
                "                   },\n" +
                "                   \"result\": {\n" +
                "                       \"value\":\"请登录前程无忧查看详情\",\n" +
                "                       \"color\":\"#173177\"\n" +
                "                   },\n" +
                "                   \"remark\":{\n" +
                "                       \"value\":\"欢迎你的加入\",\n" +
                "                       \"color\":\"#173177\"\n" +
                "                   }\n" +
                "           }\n" +
                "       }";
        post(url, data);

    }

    public String getTicket(){
        String accessToken = getAccessToken();
        String url = "https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token="+accessToken;
        String data = " {\"action_name\": \"QR_LIMIT_STR_SCENE\", \"action_info\": {\"scene\": {\"scene_str\": \"test\"}}}";
        String post = post(url, data);
        String ticket = JSONObject.fromObject(post).getString("ticket");
        return ticket;
    }

    public String getUser(String openid){
        String url = "https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN";
        String replace = url.replace("ACCESS_TOKEN", getAccessToken()).replace("OPENID", openid);
        String token = TokenUtil.getToken(replace);
        return token;
    }

}
